@using PGI_AF.Autentication
@using PGI_AF.Interfaces
@using PGI_AF.Pages.Login
@using Microsoft.AspNetCore.Components.Authorization
@inject NavigationManager Navigation

<CascadingAuthenticationState>
    <Router AppAssembly="@typeof(App).Assembly">
        <Found Context="routeData">
            <AuthorizeRouteView RouteData="@routeData" DefaultLayout="@typeof(MainLayout)">
                <NotAuthorized>
                    @if (!context.User.Identity.IsAuthenticated)
                    {
                        <RedirectToLogin />
                    }
                    else
                    {
                        <p>You are not authorized to access this resource.</p>
                    }
                </NotAuthorized>
                <Authorizing>
                    <p>Authorizing...</p>
                </Authorizing>
            </AuthorizeRouteView>
        </Found>
        <NotFound>
            <p>Sorry, there's nothing at this address.</p>
        </NotFound>
    </Router>
</CascadingAuthenticationState>

@code {
    [Inject]
    private ITokenProvider TokenProvider { get; set; }
    [Inject]
    private AuthenticationStateProvider AuthenticationStateProvider { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            // Diferir la inicialización para asegurarse de que Blazor esté completamente listo
            await Task.Yield();

            var token = await TokenProvider.GetTokenAsync();
            if (!string.IsNullOrEmpty(token))
            {
                await ((CustomAuthenticationStateProvider)AuthenticationStateProvider).MarkUserAsAuthenticated(token);
                StateHasChanged();
            }
            else
            {
                Navigation.NavigateTo("/login");
            }
        }
    }
}
